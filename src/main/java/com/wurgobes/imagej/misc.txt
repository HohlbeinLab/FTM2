// Memory

import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.OperatingSystemMXBean;
    
System.out.print("------------ Memory ---------------\n");
System.out.print("Heap : "+getHeap()+"\n");
System.out.print("Non Heap : "+getNonHeap()+"\n");
System.out.print("RT free mem : " + (Runtime.getRuntime().freeMemory()/ (1024.0 * 1024.0))+ " Mb\n");
System.out.print("RT total mem : " + (Runtime.getRuntime().totalMemory()/ (1024.0 * 1024.0))+ " Mb\n");
System.out.print("RT max mem : " + (Runtime.getRuntime().maxMemory()/ (1024.0 * 1024.0))+ " Mb\n");

String getHeap() {
    MemoryMXBean mem = ManagementFactory.getMemoryMXBean();
    double c = 1.0 / (1024.0 * 1024.0);
    double u = mem.getHeapMemoryUsage().getUsed() * c;
    double m = mem.getHeapMemoryUsage().getMax()  * c;
    double i = mem.getHeapMemoryUsage().getInit() * c;
    return String.format("u=%3.2f m=%3.2f i=%3.2f Mb", u, m, i);
}

String getNonHeap() {
    MemoryMXBean mem = ManagementFactory.getMemoryMXBean();
    double c = 1.0 / (1024.0 * 1024.0);
    double u = mem.getNonHeapMemoryUsage().getUsed() * c;
    double m = mem.getNonHeapMemoryUsage().getMax() * c;
    double i = mem.getNonHeapMemoryUsage().getMax() * c;
    return String.format("u=%3.2f m=%3.2f i=%3.2f Mb", u, m, i);
}
    
       System.out.println(ObjectSizeCalculator.getObjectSize(vstacks)); 
        System.out.println(ObjectSizeCalculator.getObjectSize(vstacks.get(0)));
        System.out.println(ObjectSizeCalculator.getObjectSize(vstacks.get(1)));
        System.out.println(ObjectSizeCalculator.getObjectSize(stack));
        System.out.println((ObjectSizeCalculator.getObjectSize(stack.getPixels(1)) + 16 )* stack.getSize() * vstacks.size()); 
